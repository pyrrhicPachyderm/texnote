#!/bin/bash

#TODO: Don't hard-code gedit and atril, use xdg-open.
#But for some reason if I xdg-open and then ^C this script,
#the applications that were opened close.

readonly pdf_viewer='atril'
readonly text_editor='gedit'

readonly usage="Usage: $0 [-r] <pdf slides file>"

function confirm {
	message="$1"
	
	echo "$message"
	read -p "Is this okay? [y/n] " -r
	if [[ ! $REPLY =~ ^[Yy]$ ]]; then exit 1; fi
}

preamble=$(cat <<'EOF'
\documentclass[a4paper,12pt]{article}
\usepackage{amssymb}
\usepackage{amsmath}
\usepackage{siunitx}
\sisetup{range-phrase=--}
\usepackage{chemformula}
\usepackage{enumerate}
\usepackage{engord}

\usepackage{cprotect}

\usepackage[T1]{fontenc}
\usepackage{lmodern} %Makes \textasciitilde not raised.
\usepackage{inconsolata} %A nice monospace font
\newcommand\textasciicaret{\textasciicircum}

\newcommand\percent[1]{\SI{#1}{\percent}}

\let\dotlessi\i %Copy the definition so we can safely redefine \i
\newcommand\naive{na\"{\dotlessi}ve}
\newcommand\Naive{Na\"{\dotlessi}ve}
\renewcommand\bezier{B{\'e}zier}

\newcommand\norm[1]{\left\lVert#1\right\rVert}
\newcommand\abs[1]{\left\lvert#1\right\rvert}
\renewcommand{\d}{\mathrm{d}}
\newcommand{\D}[1]{\mathop{\d #1}}
\renewcommand{\i}{\mathrm{i}}
\newcommand{\e}{\mathrm{e}}
\newcommand{\Imat}{\mathrm{I}}
\newcommand{\bigO}{\mathcal{O}}
\newcommand{\transpose}[1]{{#1}^{\mathrm{T}}}
\newcommand\eval[2]{{\left.#1\right\rvert}_{#2}}

%Have to delete existing commands first.
\let\Re\relax
\let\Im\relax
\DeclareMathOperator{\Re}{Re}
\DeclareMathOperator{\Im}{Im}
\DeclareMathOperator{\trace}{tr}
\DeclareMathOperator{\J}{J}

\usepackage{nopageno}
\usepackage{geometry}
\def\MinimumPaperHeight{19cm}
\geometry{paperheight=\maxdimen,margin=1in}

\newbox\pagebox
\newcommand\pagewrapper[1]{
	\setbox\pagebox=\vbox{#1}
	\usebox\pagebox
	\pdfpageheight=\dimexpr\ht\pagebox+2in\relax
	\ifdim\pdfpageheight<\MinimumPaperHeight
		\pdfpageheight=\MinimumPaperHeight
	\fi
	\clearpage
}

\begin{document}
EOF
)

postamble="\end{document}"

function create_user_file {
	user_file="$1"
	num_pages="$2"
	
	echo "$preamble" > "$user_file"
	for page_num in $(seq 1 "$num_pages"); do
		echo "\cprotect\pagewrapper{\section*{Slide $page_num}" >> "$user_file"
		echo '' >> "$user_file"
		echo '' >> "$user_file"
		echo '' >> "$user_file"
		echo '}' >> "$user_file"
	done
	echo "$postamble" >> "$user_file"
}

dedent_script=$(cat <<'EOF'
from textwrap import dedent
from sys import stdin
import re

chunk = ""

for line in stdin:
	#Included files will need dedenting, so their names will need changing.
	line = re.sub("child=\"(.*).rnw\"", "child=\"\\1-dedented.rnw\"", line)
	#knitr sometimes seems to struggle with tabs, so turn them to four spaces.
	line = line.replace("\t", "    ")
	#Chunks start with a line containing only <<something>>= or @
	#Each can be followed by whitespace
	if re.match("^<<.*>>= *$", dedent(line)) or re.match("^@ *$", dedent(line)):
		print(dedent(chunk), end="")
		chunk = ""
		print(dedent(line), end="")
	else:
		chunk += line

print(dedent(chunk), end="")
EOF
)

use_sweave=0
while getopts "r" opt; do
	case $opt in
		r)
			use_sweave=1
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
	esac
done
shift "$((OPTIND-1))" #Remove all the arguments parsed by getopts.

if [ "$#" -ne 1 ]; then
	echo "$usage"
	exit 1
else
	slides_file="$1"
fi

if [ ! -f "$slides_file" ]; then
	echo "$slides_file does not exist or is not a regular file."
	exit 1
fi

# ${VARIABLE%pattern} deletes longest match of pattern from the start.
# So this deletes the last dot and everything before it, getting the extension.
if [ ${slides_file##*.} != 'pdf' ]; then
	echo "$slides_file is not a PDF file."
	exit 1
fi

# ${VARIABLE%pattern} deletes shortest match of pattern from the end.
# So this deletes the last slash and everything after it.
slides_folder=${slides_file%/*}

basename=$(basename "$slides_file" '.pdf')

work_dir="$slides_folder/.$basename-notes"
out_file="$slides_folder/$basename-notes.pdf"

user_tex_file="$slides_folder/$basename-notes.tex"
user_rnw_file="$slides_folder/$basename-notes.rnw"

page_count=$(pdftk "$slides_file" dump_data \
	| grep NumberOfPages \
	| awk '{print $2}')
catlist=""
for ((pg = 1; pg <= page_count; pg++)); do
	catlist="$catlist A$pg B$pg"
done

if [ -f "$user_rnw_file" ]; then
	use_sweave=1
fi

if [ $use_sweave = 0 ]; then
	user_file="$user_tex_file"
else
	user_file="$user_rnw_file"
fi

if [ ! -f "$user_file" ]; then
	confirm "Will create $user_file"
	
	create_user_file "$user_file" "$page_count"
else
	confirm "$user_file already exists; I will use it."
fi

if [ ! -d "$work_dir" ]; then
	mkdir "$work_dir"
fi

$text_editor "$user_file" & disown
#disown makes the opened application a child of init
#This keeps it running when this script gets terminated.

function compile_and_build {
	if [ $use_sweave = 0 ]; then
		tex_file="$user_tex_file"
	else
		dedented_rnw_file="$work_dir/$basename-notes-dedented.rnw"
		tex_file="$work_dir/$basename-notes.tex"
		
		python3 -c "$dedent_script" < "$user_rnw_file" > "$dedented_rnw_file"
		R -e "knitr::knit('$dedented_rnw_file','$tex_file')"
	fi
	
	latexmk -output-directory="$work_dir" -jobname='notes' -pdf -halt-on-error "$tex_file"
	pdftk A="$slides_file" B="$work_dir/notes.pdf" \
		cat $catlist output "$out_file"
}

compile_and_build
$pdf_viewer "$out_file" & disown

while true; do
	while inotifywait -q -e close_write "$user_file"; do
		compile_and_build
	done
done
